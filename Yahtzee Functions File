#include "PA5.h"


void roll_die(int dice_array[], int size)
{
	int index = 0;
	for (index = 0; index < size; index++)
	{
		dice_array[index] = rand() % 6 + 1;
	}
}

void display_dice(int dice_array[], int size)
{
	int index = 0;
	for (index = 0; index < size; index++)
	{
		if (dice_array[index] == 1)
		{
			printf("Die %d: \n", index+1);
			printf("---------\n|       |\n|   O   |\n|       |\n--------- \n\n");
		}
		else if (dice_array[index] == 2)
		{
			printf("Die %d: \n", index + 1);
			printf("---------\n|  O    |\n|       |\n|    O  |\n--------- \n\n");
		}
		else if (dice_array[index] == 3)
		{
			printf("Die %d: \n", index + 1);
			printf("---------\n| O     |\n|   O   |\n|     O |\n--------- \n\n");
		}
		else if (dice_array[index] == 4)
		{
			printf("Die %d: \n", index + 1);
			printf("---------\n| O   O |\n|       |\n| O   O |\n--------- \n\n");
		}
		else if (dice_array[index] == 5)
		{
			printf("Die %d: \n", index + 1);
			printf("---------\n| O   O |\n|   O   |\n| O   O |\n--------- \n\n");
		}

		else if (dice_array[index] == 6)
		{
			printf("Die %d: \n", index + 1);
			printf("---------\n| O   O |\n| O   O |\n| O   O |\n--------- \n\n");
		}

	}
	
}

int game_menu()
{
	char menu_choice = '\0';
	int play_game = 0;

	printf("\nWelcome to Yachtzee!\n\n");

	do
	{
		printf("Please Make Window Fullscreen For The Best Visuals!\n");
		printf("\n*********************************************\nOption 1: Display Rules.\nOption 2: Play Game.\nOption 3: Exit.\n*********************************************\n\nEnter Option: \n\n");


		scanf(" %c", &menu_choice);


		system("cls");
		switch (menu_choice)
		{
		case '1': printf("The Rules of Yahtzee:\nThe scorecard used for Yahtzee is composed of two sections.A upper sectionand a lower section.\nA total of thirteen boxes or thirteen scoring combinations are divided amongst the sections.\nThe upper section consists of boxes that are scored by summing the value of the dice matching the faces of the box.\nIf a player rolls four 3's, then the score placed in the 3's box is the sum of the dice which is 12.\nOnce a player has chosen to score a box, it can't be changed and the combination is no longer in play for future rounds.\nIf the sum of scores in the upper section is greater than 62, 35 more points are added to the players overall score.\nThe lower section contains a number of poker like combinations.\n\n");
			menu_choice = 0;
			break;

		case '2': play_game = 1;
			break;
		case '3':
			printf("Good Bye! Thanks For Playing!\n");
			play_game = -1;
			break;
		}
	} while (menu_choice != '1' && menu_choice != '2' && menu_choice != '3');

	return play_game;
}

void press_any_key_to_roll_dice()
{
	printf("Press any key to Roll Dice\n");
	system("pause\n\n");


}

int ask_for_score_save()
{
	int score_save = 0;
	char choice = '\0';

	while (choice != 'y' && choice!= 'Y' && choice != 'n' && choice != 'N')
	{
		printf("Do you want to use this combination for a score? Enter 'y' for yes or 'n' for no.\n");
		scanf(" %c", &choice);
	}
	if(choice == 'n' || choice == 'N')
	{
		score_save = 0;
		return score_save;
	}

	else if(choice == 'y' || choice == 'Y')
	{
		score_save = 1;
		return score_save;
	}
}

void reroll_dice(int dice_array[])
{
	int die_number = -1;
	int count_rolls = 1;
	printf("Enter the die numbers you wish to reroll separated by spaces. Enter 0 if you're done, or do not wish to reroll any dice.\nExample: If you wanted to roll only die 1, 3, and 5 enter 1 3 5 0. If rerolling all 5, enter 1 2 3 4 5, but do not include 0 at the end.\n");
	
	while (die_number != 0 && count_rolls <=5)
	{
		scanf("%d", &die_number);
		if(die_number != 0)
			dice_array[die_number-1] = rand() % 6 + 1;
		count_rolls += 1;
	}
}


void print_score(int scorecard[], int size, int player)
{
	int index = 0;
	printf("(NU means that combination has not been used yet!)\tPlayer %d Scorecard: \n", player);
	for (index = 0; index < size; index++)
	{
		if (scorecard[index] < 0)
		{
			if (index < 6)printf("NU\t");
			else printf("NU\t\t");
		}

		else
		{
			if (index < 6)printf("%d\t", scorecard[index]);
			else printf("%d\t\t", scorecard[index]);

		}
	}
	printf("\n");
	printf("1's\t2's\t3's\t4's\t5's\t6's\t3 Of A Kind\t4 Of A Kind\tFull House\tSmall Straight\tLarge Straight\tYahtzee\t\tChance\n\n");
}

int choose_combo(int scorecard[])
{
	int choice = 0, check = 0;
	printf("Options:\n1: 1's\t\t\t2: 2's\n3: 3's\t\t\t4: 4's\n5: 5's\t\t\t6: 6's\n7: 3 Of A Kind\t\t8: 4 Of A Kind\n9: Full House\t\t10: Small Straight\n11: Large Straight\t12: Yahtzee\n13: Chance\n");
	printf("Enter Combination You Wish to Score: ");

	while (check != 1) 
	{
		scanf("%d", &choice);
		
		if (scorecard[choice-1] < 0)
		{
			check = 1;
		}
		else if(scorecard[choice >= 0])
			printf("Invalid option! Enter Another Option:\n");
	}
	return choice;
}

void calculate_sums_score(int scorecard[], int dice_array[], int option)
{
	int score = 0;
	for (int index = 0; index < 5; index++)
	{
		
		if (dice_array[index] == option)
			score += option;

	}
	scorecard[option-1] = score;
}

void check_3kind(int scorecard[], int dice_array[])
{
	if (dice_array[0] == dice_array[1] && dice_array[1] == dice_array[2])
		scorecard[6] = dice_array[0] + dice_array[1] + dice_array[2] + dice_array[3] + dice_array[4];

	else if (dice_array[1] == dice_array[2] && dice_array[2] == dice_array[3])
		scorecard[6] = dice_array[0] + dice_array[1] + dice_array[2] + dice_array[3] + dice_array[4];
	else if (dice_array[2] == dice_array[3] && dice_array[3] == dice_array[4])
		scorecard[6] = dice_array[0] + dice_array[1] + dice_array[2] + dice_array[3] + dice_array[4];
	else
		scorecard[6] = 0;

	
}

void bubble_sort(int dice_array[])
{
	int index = 0, passes = 0, temp = 0;


	for (passes = 1; passes < 5; ++passes)
	{
		for (index = 0; index < 5 - passes; ++index)
		{
			if (dice_array[index] > dice_array[index + 1])
			{
				//
				temp = dice_array[index];
				dice_array[index] = dice_array[index + 1];
				dice_array[index + 1] = temp;
			}
		}
	}

}

void check_4kind(int scorecard[], int dice_array[])
{
	if (dice_array[0] == dice_array[1] && dice_array[1] == dice_array[2] && dice_array[2] == dice_array[3])
		scorecard[7] = dice_array[0] + dice_array[1] + dice_array[2] + dice_array[3] + dice_array[4];

	else if (dice_array[1] == dice_array[2] && dice_array[2] == dice_array[3] && dice_array[3] == dice_array[4])
		scorecard[7] = dice_array[0] + dice_array[1] + dice_array[2] + dice_array[3] + dice_array[4];

	else
		scorecard[7] = 0;
	

}

void check_full_house(int scorecard[], int dice_array[])
{
	if (dice_array[0] == dice_array[1] && dice_array[1] == dice_array[2] && dice_array[3] == dice_array[4])
		scorecard[8] = 25;

	else if (dice_array[1] == dice_array[2] && dice_array[2] == dice_array[3] && dice_array[0] == dice_array[4])
		scorecard[8] = 25;
	else if (dice_array[2] == dice_array[3] && dice_array[3] == dice_array[4] && dice_array[0] == dice_array[1])
		scorecard[8] = 25;
	else
		scorecard[8] = 0;

}

void check_small_straight(int scorecard[], int dice_array[])
{

	int count[6] = { 0 };
	int number = 0;
	int counter = 0;
	for (int index = 0; index < 5; index++)
	{
		number = dice_array[index];
		count[number - 1] += 1;
	}

	for (int index = 0; index < 6 && counter < 4; index++)
	{
		if (count[index] > 0)
			counter += 1;
		else if (count[index] == 0)
			counter = 0;
	}

	if (counter >= 4)
		scorecard[9] = 30;
	else if (counter < 4)
		scorecard[9] = 0;

}

void check_large_straight(int scorecard[], int dice_array[])
{
	int count[6] = { 0 };
	int number = 0;
	int counter = 0;
	for (int index = 0; index < 5; index++)
	{
		number = dice_array[index];
		count[number - 1] += 1;
	}

	for (int index = 0; index < 6 && counter < 5; index++)
	{
		if (count[index] > 0)
			counter += 1;
		else if (count[index] == 0)
			counter = 0;
	}

	if (counter == 5)
		scorecard[10] = 40;
	else if (counter != 5)
		scorecard[10] = 0;
	
	

}

void check_yahtzee(int scorecard[], int dice_array[])
{
	if (dice_array[0] == dice_array[1] && dice_array[1] == dice_array[2] && dice_array[2] == dice_array[3] && dice_array[3] == dice_array[4])
		scorecard[11] = 50;
	else
		scorecard[11] = 0;


}

void calculate_chance(int scorecard[], int dice_array[])
{
	scorecard[12] = dice_array[0] + dice_array[1] + dice_array[2] + dice_array[3] + dice_array[4];

}

int check_full(int scorecard[], int scorecard2[])
{
	int counter = 1; int full1 = 0, full2 = 0;
	for (int index = 0; index < 13 && counter !=0; index++)
	{
		if (scorecard[index] >= 0)
			counter += 1;
		else if (scorecard[index] == 0)
			counter = 0;

	}

	if (counter < 14)
		full1 = 0;

	else if (counter == 14)
		full1 = 1;

	counter = 1;
	for (int index = 0; index < 13 && counter != 0; index++)
	{
		if (scorecard2[index] >= 0)
			counter += 1;
		else if (scorecard2[index] == 0)
			counter = 0;
	}
		if (counter < 14)
			full2 = 0;

		else if (counter == 14)
			full2 = 1;

		if (full1 == 1 && full2 == 1)
			return 1;
		else return 0;
		

}

int sum_score(int scorecard[])
{
	int total_score = 0, sums_of = 0;
	for (int index = 0; index < 13; index++)
		total_score += scorecard[index];

	sums_of = scorecard[0] + scorecard[1] + scorecard[2] + scorecard[3] + scorecard[4] + scorecard[5];
	if (sums_of >= 63)
	total_score += 35;

	return total_score;

}

void determine_winner(int p1, int p2)
{
	printf("Scores after Bonuses are applied:\nPlayer 1 Score: %d\nPlayer 2 Score: %d\n\n", p1, p2);

	if (p1 > p2)
		printf("Player 1 Wins!\n");

	else if (p2 > p1)
		printf("Player 2 Wins!\n");
	else if (p1 == p2)
		printf("You Tied!\n");


}

